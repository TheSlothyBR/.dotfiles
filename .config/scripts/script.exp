#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Jun  1 20:32:14 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set name [lindex $argv 0]

set timeout -1
spawn ./svelteapp.sh $name
match_max 100000
expect -exact "\[90m\r
create-svelte version 2.0.0-next.140\[39m\r
\r
\[1m\[36mWelcome to SvelteKit!\[39m\[22m\r
\r
\[1m\[31mThis is beta software; expect bugs and missing features.\[39m\[22m\r
\r
Problems? Open an issue on \[36mhttps://github.com/sveltejs/kit/issues\[39m if none exists already.\r
\r
\[?25l\[36m?\[39m \[1mWhich Svelte app template?\[22m \[90m‚Ä∫\[39m \[90m- Use arrow-keys. Return to submit.\[39m\r
\[36m‚ùØ\[39m   \[36m\[4mSvelteKit demo app\[39m\[24m\[90m\[39m\r
    Skeleton project\[90m\[39m\r
"
send -- "\[B"
expect -exact "\[2K\[1A\[2K\[1A\[2K\[1A\[2K\[G\[36m?\[39m \[1mWhich Svelte app template?\[22m \[90m‚Ä∫\[39m \[90m- Use arrow-keys. Return to submit.\[39m\r
    SvelteKit demo app\[90m\[39m\r
\[36m‚ùØ\[39m   \[36m\[4mSkeleton project\[39m\[24m\[90m\[39m\r
"
send -- "\r"
expect -exact "\[2K\[1A\[2K\[1A\[2K\[1A\[2K\[G\[32m‚úî\[39m \[1mWhich Svelte app template?\[22m \[90m‚Ä∫\[39m Skeleton project\r
\[?25h\[?25l\[36m?\[39m \[1mAdd type checking?\[22m \[90m‚Ä∫\[39m \[90m- Use arrow-keys. Return to submit.\[39m\r
\[36m‚ùØ\[39m   \[36m\[4mType-checked JavaScript\[39m\[24m\[90m\[39m\r
    TypeScript\[90m\[39m\r
    None\[90m\[39m\r
"
send -- "\[B"
expect -exact "\[2K\[1A\[2K\[1A\[2K\[1A\[2K\[1A\[2K\[G\[36m?\[39m \[1mAdd type checking?\[22m \[90m‚Ä∫\[39m \[90m- Use arrow-keys. Return to submit.\[39m\r
    Type-checked JavaScript\[90m\[39m\r
\[36m‚ùØ\[39m   \[36m\[4mTypeScript\[39m\[24m\[90m\[39m\r
    None\[90m\[39m\r
"
send -- "\r"
expect -exact "\[2K\[1A\[2K\[1A\[2K\[1A\[2K\[1A\[2K\[G\[32m‚úî\[39m \[1mAdd type checking?\[22m \[90m‚Ä∫\[39m TypeScript\r
\[?25h\[?25l\[2K\[1G\[36m?\[39m \[1mAdd ESLint for code linting?\[22m \[90m‚Ä∫\[39m \[36m\[4mNo\[39m\[24m \[90m/\[39m Yes"
send -- "\[C"
expect -exact "\[2K\[G\[2K\[1G\[36m?\[39m \[1mAdd ESLint for code linting?\[22m \[90m‚Ä∫\[39m No \[90m/\[39m \[36m\[4mYes\[39m\[24m"
send -- "\r"
expect -exact "\[2K\[G\[2K\[1G\[32m‚úî\[39m \[1mAdd ESLint for code linting?\[22m \[90m‚Ä¶\[39m No \[90m/\[39m \[36m\[4mYes\[39m\[24m\r
\[?25h\[?25l\[2K\[1G\[36m?\[39m \[1mAdd Prettier for code formatting?\[22m \[90m‚Ä∫\[39m \[36m\[4mNo\[39m\[24m \[90m/\[39m Yes"
send -- "\[C"
expect -exact "\[2K\[G\[2K\[1G\[36m?\[39m \[1mAdd Prettier for code formatting?\[22m \[90m‚Ä∫\[39m No \[90m/\[39m \[36m\[4mYes\[39m\[24m"
send -- "\r"
expect -exact "\[2K\[G\[2K\[1G\[32m‚úî\[39m \[1mAdd Prettier for code formatting?\[22m \[90m‚Ä¶\[39m No \[90m/\[39m \[36m\[4mYes\[39m\[24m\r
\[?25h\[?25l\[2K\[1G\[36m?\[39m \[1mAdd Playwright for browser testing?\[22m \[90m‚Ä∫\[39m \[36m\[4mNo\[39m\[24m \[90m/\[39m Yes"
send -- "\[C"
expect -exact "\[2K\[G\[2K\[1G\[36m?\[39m \[1mAdd Playwright for browser testing?\[22m \[90m‚Ä∫\[39m No \[90m/\[39m \[36m\[4mYes\[39m\[24m"
send -- "\r"
expect eof
